// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TemurMannonov/query_analyzer/api (interfaces: DBRepositoryI)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	models "github.com/TemurMannonov/query_analyzer/storage/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDBRepositoryI is a mock of DBRepositoryI interface.
type MockDBRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepositoryIMockRecorder
}

// MockDBRepositoryIMockRecorder is the mock recorder for MockDBRepositoryI.
type MockDBRepositoryIMockRecorder struct {
	mock *MockDBRepositoryI
}

// NewMockDBRepositoryI creates a new mock instance.
func NewMockDBRepositoryI(ctrl *gomock.Controller) *MockDBRepositoryI {
	mock := &MockDBRepositoryI{ctrl: ctrl}
	mock.recorder = &MockDBRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepositoryI) EXPECT() *MockDBRepositoryIMockRecorder {
	return m.recorder
}

// GetList mocks base method.
func (m *MockDBRepositoryI) GetList(arg0 *models.GetQueriesParams) (*models.GetQueriesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", arg0)
	ret0, _ := ret[0].(*models.GetQueriesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockDBRepositoryIMockRecorder) GetList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockDBRepositoryI)(nil).GetList), arg0)
}
